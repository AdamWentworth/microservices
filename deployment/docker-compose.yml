version: '3.8'
services:
  zookeeper:
    image: wurstmeister/zookeeper
    ports:
      - "2181:2181"
    hostname: zookeeper
    volumes:
      - /home/adam/zookeeper/data:/opt/zookeeper-3.4.13/data

  kafka:
    image: wurstmeister/kafka
    command: [start-kafka.sh]
    ports:
      - "9092:9092"
    hostname: kafka
    environment:
      KAFKA_CREATE_TOPICS: "events:1:1,event_log:1:1"
      KAFKA_ADVERTISED_HOST_NAME: kafka # Use the service name for internal networking
      KAFKA_LISTENERS: INSIDE://:29092,OUTSIDE://:9092
      KAFKA_INTER_BROKER_LISTENER_NAME: INSIDE
      KAFKA_ADVERTISED_LISTENERS: INSIDE://kafka:29092,OUTSIDE://kafka:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INSIDE:PLAINTEXT,OUTSIDE:PLAINTEXT
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LOG_DIRS: /kafka/kafka-logs
      KAFKA_BROKER_ID: 1
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - /home/adam/kafka:/kafka/kafka-logs
    depends_on:
      - zookeeper

  db:
    image: mysql:5.7
    environment:
      MYSQL_DATABASE: 'artist_tracker'
      MYSQL_USER: 'adam'
      MYSQL_PASSWORD: 'password'
      MYSQL_ROOT_PASSWORD: 'Padraig#88'
    ports:
      - '3306:3306'
    volumes:
      - my-db:/var/lib/mysql

  receiver:
    image: receiver:latest
    ports:
      - "8080"
    environment:
      - TARGET_ENV=test
    volumes:
      - /home/adam/config/receiver:/config
      - /home/adam/logs:/logs
    depends_on:
      - kafka
      - db
    networks:
      - api.network

  storage:
    image: storage:latest
    ports:
      - "8090"
    environment:
      - TARGET_ENV=test
      - MYSQL_USER=adam
      - MYSQL_PASSWORD=password
      - MYSQL_DATABASE=artist_tracker
      - MYSQL_HOSTNAME=db
    volumes:
      - /home/adam/config/storage:/config
      - /home/adam/logs:/logs
    depends_on:
      - db
      - kafka
    networks:
      - api.network

  processing:
    image: processing:latest
    ports:
      - "8100"
    environment:
      - TARGET_ENV=test
    volumes:
      - /home/adam/config/processing:/config
      - /home/adam/logs:/logs
      - processing-db:/data
    depends_on:
      - storage
    networks:
      - api.network

  audit:
    image: audit:latest
    ports:
      - "8110"
    environment:
      - TARGET_ENV=test
    volumes:
      - /home/adam/config/audit:/config
      - /home/adam/logs:/logs
    depends_on:
      - kafka
    networks:
      - api.network

  event-logger:
    image: event-logger:latest
    ports:
      - "8120"
    environment:
      - TARGET_ENV=test
    volumes:
      - /home/adam/config/event-logger:/config
      - /home/adam/logs:/logs
      - event-logger-db:/data
    depends_on:
      - kafka
    networks:
      - api.network

  dashboard:
    image: dashboard:latest
    ports:
      - "3000"
    depends_on:
      - processing
      - audit
    networks:
      - api.network

  anomaly_detector:
    image: anomaly_detector:latest
    ports:
      - "8130"
    environment:
      - TARGET_ENV=test
    volumes:
      - /home/adam/config/anomaly_detector:/config
      - /home/adam/logs:/logs
      - anomaly_detector-db:/data #if needing persistent volume
    depends_on:
      - receiver
    networks:
      - api.network

  nginx:
    image: nginx:latest
    volumes:
      - /home/adam/nginx/nginx.conf:/etc/nginx/nginx.conf:ro  # Adjust this path as needed
    depends_on:
      - "receiver"
      - "storage"
      - "processing"
      - "audit" 
      - "dashboard"
      - "anomaly_detector"
    ports:
      - "80:80"
    networks:
      - api.network

volumes:
  my-db:
  processing-db:
  event-logger-db:
  anomaly_detector-db:

networks:
  api.network: